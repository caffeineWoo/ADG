<categories>
    <category>
        <title>History of Operating Systems (cont.)</title>
        <subtitle>Phase 1 — hardware is expensive, humans are cheap</subtitle>
        <content>
            <item>One user at console- One function at a time (computation, I/O, user think/response)- Program loaded via card deck- Libraries of device drivers (for I/O)- User debugs at console</item>
            <item>Simple batch processing: load program, run, print results, dump, repeat- User gives program (cards or tape) to the operator, who schedules the jobs- Resident monitor automatically loads, runs, dumps user jobs- Requires memory management (relocation) and protection- More efficient use of hardware, but debugging is more difficult (from dumps)</item>
            <item>Overlapped CPU & I/O operations- First: buffer slow I/O onto fast tape drives connected to CPU, replicate I/O devices- Later: spool data to disk</item>
            <item>Multiprogrammed batch systems- Multiple jobs are on the disk, waiting to run- Multiprogramming — run several programs at the “same” time- Pick some jobs to run (scheduling), and put them in memory (memory management)</item>
        </content>
    </category>
    <category>
        <title>History Lessons</title>
        <content>
            <item>None of these operating systems were particularly bad; each depended on tradeoffs made at that point in time- Technology changes drive OS changes</item>
            <item>Since 1953, there has been about 9 orders of magnitude of change in almost every computer system component- Unprecedented! In past 200 years, gone from horseback (10 mph) to Concorde (1000 mph), only 2 orders of magnitude</item>
        </content>
    </category>
    <category>
        <title>Modern OS Functionality</title>
        <subtitle>(Review)</subtitle>
        <content>
            <item>Concurrency- Multiple processes active at once- Processes can communicate- Processes may require mutually-exclusive access to some resource- CPU scheduling, resource management</item>
            <item>Memory management- Allocate memory to processes, move processes between disk and memory</item>
            <item>File system- Allocate space for storage of programs and data on disk</item>
            <item>Networks and distributed computing- Allow computers to work together</item>
            <item>Security & protection</item>
        </content>
    </category>
    <category>
        <title>More Recent Developments</title>
        <content>
            <item>Parallel operating systems- Shared memory, shared clock- Large number of tightly-coupled processors- Appearance of single operating system</item>
            <item>Distributed operating systems- No shared memory, no shared clock- Small number of loosely-coupled processors- Appearance of single operating system is ideal goal, but not realized in practice- May try to simulate a shared memory</item>
            <item>Real-time operating systems- Meet hard / soft real-time constraints on processing of data</item>
        </content>
    </category>
    <category>
        <title>Personal computing</title>
        <content>
            <item>CPUs are cheap enough to put one in each terminal, yet powerful enough to be useful- Computers for the masses!</item>
            <item>Return to simplicity; make OS simpler by getting rid of support for multiprogramming, concurrency, and protection</item>
            <item>Modern operating systems are:- Enormous- Small OS = 100K lines of code- Big OS = 10M lines- Complex (100-1000 person year of work)- Poorly understood (outlives its creators, too large for one person to comprehend)</item>
        </content>
    </category>
</categories>